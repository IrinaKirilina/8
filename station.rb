require "./instance_counter"
require "./valid"
# Станция
# 1. Имеет название, которое указывается при ее создании
# 2. Может принимать поезда (по одному за раз)
# 3. Может возвращать список всех поездов на станции
# 4. Может возвращать список поездов на станции по типу грузовые, пассажирские
# 5. Может отправлять поезда (по одному за раз, при этом, поезд удаляется из списка поездов, находящихся на станции).

class Station
  # Mодуль InstanceCounter, содержащий методы: 1- увеличивающий счетчик кол-ва экземпляров класса и который можно вызвать из конструктора 2- возвращающий кол-во экземпляров данного класса
  include InstanceCounter

  # 1. Имеет название
  attr_accessor :name
  # 3. Может возвращать список всех поездов на станции
  attr_reader :trains
  
  NAME_FORMATE = /^[a-zа-я]{3}/i

  @@all = []

  # 1. Имеет название, которое указывается при ее создании
  # 2. Может принимать поезда
  def initialize(name)
    @name = name
    @trains = []
    @@all << self

    validate!
    
    register_instance
  end

  # 2. Может принимать поезда (по одному за раз)
  def arrival(train)
    # в массив "поезда" добавляем "поезд", который нам передали в методе
    @trains << train
  end

  # 5. Может отправлять поезда (по одному за раз, при этом, поезд удаляется из списка поездов, находящихся на станции).
  def departure(train)
    @trains.delete(train)
  end

  # 4. Может возвращать список поездов на станции по типу грузовые, пассажирские
  def trains_by_type(type)
    @trains.select { |train| train.type == type }
  end

  # Метод класса, который возвращает все станции (объекты), созданные на данный момент
  def self.all
    @@all
  end

  # Метод валидности имени
  def validate!
    raise "Необходимо ввести наименование станции" if name.nil?
    raise "Наименование должно содержать не менее 3 символов" if name.length < 3
    raise "Неверный формат наименования станции" if name !~ NAME_FORMATE
    
    true
  end

  # метод принимает блок и проходит по всем поездам на станции, передавая каждый поезд в блок
  def each_train
    @trains.each {|train| yield train} if block_given?
  end
end